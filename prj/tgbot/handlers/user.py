from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
import logging

from keyboards.keyboards import get_kb, back_kb, send_notify_kb
from states.user import User_States
from utils.async_mysql import AsyncMySQL

router = Router()
db = AsyncMySQL()


@router.startup()
async def on_startup():
    await db.create_pool()


@router.shutdown()
async def on_shutdown():
    await db.close()


@router.message(CommandStart())
async def start(msg: Message, state: FSMContext, command: CommandObject):
    await msg.answer('–ü—Ä–∏–≤–µ—Ç')
    user_id = int(command.args) if command.args else None
    if user_id:
        tg_user_id = await db.user_id_exists(user_id)
        if not tg_user_id:
            print(await db.add_tg_user_id_to_user(user_id, msg.chat.id))
            await msg.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –∞–∫–∫—É–Ω—Ç –∏ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—é–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Texevents')
            await state.update_data(id=int(command.args))
        else:
            if tg_user_id == -1:
                await msg.answer('–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É')
            else:
                await msg.answer('–í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–∞ —Å–∞–π—Ç–µ')

    if await db.get_role_user((await state.get_data())['id']) == 1:
        await state.set_state(User_States.menu)
        await msg.answer('–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ –ª—é–¥–µ–π, —É—á–∞–≤—Å—Ç–≤—É—é—â–∏—Ö –≤ —Å–æ–±—ã—Ç–∏–∏ –≤–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.',
                         reply_markup=send_notify_kb)


@router.message(Command("menu"))
async def get_menu(msg: Message, state: FSMContext):
    if msg.text == 'üîî–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', reply_markup=await get_kb('events'))
        await state.set_state(User_States.choose_event)
    else:
        await not_understend(msg, state)


@router.message(User_States.menu)
async def get_menu(msg: Message, state: FSMContext):
    if msg.text == 'üîî–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', reply_markup=await get_kb('events'))
        await state.set_state(User_States.choose_event)
    else:
        await not_understend(msg, state)


@router.message(User_States.choose_event)
async def choose_event(msg: Message, state: FSMContext):
    texts = await db.get_events(1)
    if msg.text in texts:
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', reply_markup=await get_kb('actions', msg.text))
        await state.set_state(User_States.choose_action)
        await state.update_data(event=msg.text)
    elif msg.text == 'üîô–ù–∞–∑–∞–¥':
        await state.set_state(User_States.menu)
        await msg.answer('‚ò∞–ú–µ–Ω—é', reply_markup=send_notify_kb)
    else:
        await not_understend(msg, state)


@router.message(User_States.choose_action)
async def choose_action(msg: Message, state: FSMContext):
    texts = await db.get_actions(1)
    if msg.text in texts:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', reply_markup=back_kb)
        await state.set_state(User_States.send_notify)
        await state.update_data(action=msg.text)
    elif msg.text == 'üîô–ù–∞–∑–∞–¥':
        await state.set_state(User_States.choose_event)
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', reply_markup=await get_kb('events'))
    else:
        await not_understend(msg, state)


@router.message(User_States.send_notify)
async def send_notify(msg: Message, state: FSMContext):
    if msg.text == 'üîô–ù–∞–∑–∞–¥':
        await state.set_state(User_States.choose_action)
        data = await state.get_data()
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', reply_markup=await get_kb('actions', data['event']))
        return
    data = await state.get_data()
    print(data)
    # actions = (await db.get_events(2))[data['event']]
    for tg_user_id in await db.get_members_for_action(data['action']):
        if tg_user_id:
            await msg.bot.send_message(tg_user_id,
                                       f'üîî–ü–æ—Å—Ç—É–ø–∏–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞üîî\n\n'
                                     f'*–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏e*: {data["event"]}\n'
                                     f'*C–æ–±—ã—Ç–∏–µ*: {data["action"]}\n\n'
                                     f'{msg.text}',
                                     parse_mode='Markdown')

    await msg.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
    await state.set_state(User_States.choose_action)
    data = await state.get_data()
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', reply_markup=await get_kb('actions', data['event']))



@router.message()
async def not_understend(msg: Message, state: FSMContext):
    state_user = await state.get_state()
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.chat.full_name} (@{msg.chat.username}, state: {state_user}) –Ω–∞–ø–∏—Å–∞–ª: {msg.text}"
    )

    await msg.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª")
